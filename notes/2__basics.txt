-----------------------
|	______________	  |
|	|			  |	  |
|	|	 _____	  |	  |
|	|	|	  |	  |	  |
|	|	| JVM |   |	  |
|	|	|_____|	  |	  |
|	|	  JRE	  |	  |
|	|_____________|	  |
|		  JDK		  |
-----------------------



Order of execution of java program: 

java program(.java, platform independent) -> compiler -> produced bytecode(.class) -> read by JVM (platform dependent) -> machine code read by CPU -> output



JAVA --
- platform independent
- oops
- WORA ( write once run anywhere )


JVM (Java Virtual Machine) 
- abstract machine (means a software) 
- platform DEPENDENT(mac, windows, linux etc.)
- has JIT compiler ( Just In Time ) -> input bytecode, output machine code


JRE (Java Runtime Environment)
- combination of JVM and class libraries 
- JVM need to resolve the linking of library code (eg .lang.Math, .utils etc.)
- with JRE and bytecode, you can run any java program, but you cannot code it
- you need to have JRE and JVM both to run the program 


JDK (Java Development Kit)
- has java programming lang 
- has compiler (javac) which creates the .class file
- has debugger
- JDK = JRE + (P.L. [java] + compiler + debugger + etc.)


NOTE: JDK, JVM, JRE are ALL platform DEPENDENT 

---------------------------------------------------------------------------------------------------


In any java program:- 

1. the filename matches the classname
2. a particular file can have ONLY 1 public class
3. a class can have variables, methods, constructors, nested (inner) classes
4. main() method is the starting point of the program. JVM calls the main() to start running the program. that is why it is public static void main. it does not return anything (void), public means it can be called from anywhere (and can be called by JVM). static implies that it can be called through class only without creating the object of the class
5. to compile a .java program to create the bytecode:- 
eg: to compile Employee.java -> write -> javac Employee.java -> Employee.class (bytecode) created
6. to run the bytecode:-> java Employee -> gets output 
7. when any changes are done to .java file, first compile and then run because JVM reads bytecode only



Some important points:- 

1. main() method should always be in the public class only
- because it has to be called by JVM 
2. main() must be static 
- because JVM can call main() using the class name only 
3. the name of the java program file must match the public class within it
- suppose, there are multiple public classes in file B.java, we have classes public A, public B, public C. now JVM searches for main() inside a public class. when there are multiple public classes, how will the JVM know in which main() is present. hence, there should be exactly 1 public class in which main() should be present. Also, JVM searches main() inside the public class that matches the filename
