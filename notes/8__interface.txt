Interface


- access modifiers allowed : `public` and `default`
- interface can NEVER be private or protected
- CAN extend ANY number of interfaces using "extends" keyword and comma separated parent interfaces
- can NEVER be used to form objects
- all the methods in an interface are abstract methods (methods with only signatures)

NOTE: ANY kind of  class (public/ private/ protected/ default) can implement a `public` interface
---------------------------------------------------------------------------------------------------

VERY IMPORTANT GENERAL NOTE

Although in java, the parent interface / class (reference variable) can store the reference of the concrete class object having method definitions. BUT, in such case, ONLY those methods will be accessible on the object which have been declared/defined upto the scope of the reference storing class/interface

Eg: TreeMap, concrete class implements NavigableMap extends SortedMap which extends SequencedMap which extends Map.

Now, the reference of the TreeMap object can be stored in either Map or SequencedMap or SortedMap or NavigableMap or TreeMap ( parent -> child order )
BUT, say if some method is declared in SortedMap interface level, say .headMap(), then, this method is only accessible ONLY if the reference was stored in SortedMap or its descendants
---------------------------------------------------------------------------------------------------
- Need of interface:


1. Abstraction:
- can achieve 100% abstraction by specifying WHAT a class must do and NOT showing HOW it should do


2. Runtime polymorphism ( Can be used as a data type ):
- since parent class in java can hold the reference of the child class objects, interface name can be used as datatype to hold the reference of the concrete child class objects, so at runtime, it decides which method to call based on the object of which class it is

eg: Bird bird1 = new Hen(); Bird bird2 = new crow(); here, Bird is interface


3. Multiple inheritance ( VERY IMPORTANT )
- resolves the diamond problem, what is this ?
- diamond problem: when 2 parent class have exactly same method signature, then "suppose", if we could create a child class extending from both, then compiler will now know which implementation to call from the child object. hence, this thing is not allowed in java

- using interface, we only give the "method signatures", the implementing class has to give its OWN implementation of the method, so multiple interfaces can have same method signatures, and the implementing class will provide its own implementation of that method
---------------------------------------------------------------------------------------------------


Some VERY IMPORTANT points:

1. interface can either be "public" or "default"

2. ALL the method in interface are "public" implicitly
- so, in an interface, both of the below are exactly same
int getId(); and
public int getId();

3. interface methods can NEVER be private or protected

4. NO method can be declared as "final" in an interface, because it means, method can not be overridden, but interface methods are always to be overridden

5. ALL the fields ( data members ) are public CONSTANT (static final) only implicitly.
- each data field is `public static final` only, so both are same:
int MAX_HEIGHT = 200;
public static final int MAX_HEIGHT = 200;

6. NONE of the fields can be private or protected (public is enforced by compiler)


TLDR:
- NOTHING in an interface can be private or protected
- EVERY data field is a public constant (public static final)
---------------------------------------------------------------------------------------------------


Interface implementation:

1. A concrete class MUST provide all the implementations of the methods

2. An "abstract" class CAN also implement ANY number of interfaces and, it can provide implementation of NONE/SOME/ALL methods. but the concrete class extending this abstract class MUST provide the implementation of all the methods that are not defined yet

3. 1 interface can extend another interface using "extends" keyword
---------------------------------------------------------------------------------------------------

static methods in interface :

- static methods in an interface can be called using interface name itself.
- private methods in interface can also be both static and non-static
- need of private static -> used by default methods in interface without exposing logic to impl class
- need of private non-static -> used by default methods with instance-specific logic
- need of public static -> directly call using interface name, obviously after providing an impl maybe using anonymous class, but not based on instance specific logic ( default method )
---------------------------------------------------------------------------------------------------

IMPORTANT NOTE:

- static methods can NEVER be abstract anywhere in java.
- why ? -> because they are tied to class and not instance. keeping anything abstract means to override in any instance, static is not tied to any instance, hence, static is always concrete method.

---------------------------------------------------------------------------------------------------


Nested interface:

1. if within an interface: it is implicitly `public static` ( IMPORTANT ) , eg: Entry in Map
2. if within a class: can be private, protected, public or default and static (always)

NOTE: if an interface is nested, be in class or interface, it is ALWAYS static, which means, the class implementing this nested interface DOES NOT need to implement the enclosing interface or extend the enclosing class

NOTE: if the nested interface is static, this interface can be implemented without the need of implementing enclosing interface and the class implementing this interface can either be static OR non-static

// skipping the rest from this part
NOTE: come back and complete this part
---------------------------------------------------------------------------------------------------


Some difference b/w abstract class and interface:

1. variables in abstract class can static / non-static / final / non-final
but in interface, all are public static final implicitly

2. methods in abstract class can be public / private / protected / default.
but in interface, all the methods are public implicitly

3. abstract class CAN have a constructor, interface CANNOT have a constructor

4. `abstract` is used in abstract class to make a method abstract along with access modifier, in interface, all methods are implicitly abstract public
---------------------------------------------------------------------------------------------------


Java 8 interface features:


1. default method:
- this method can be implemented inside the interface itself and, it will be present in the class implementing that interface
- so, it removes the overhead of writing SAME implementation across ALL classes implementing it

NOTE: problem of having multiple interfaces having exactly same default method signature:

- when a class is implementing more than 1 interface where some default method has exactly same signature, (again a diamond problem), then, the class has to provide its OWN implementation of the default method
- see MultipleInterface class
---------------------------------------------------------------------------------------------------


How to extend an interface that contains the default method


- check BirdChild interface
---------------------------------------------------------------------------------------------------


Java 9 features


- "private methods" can be provided inside an interface, these methods can NOT be accessed outside the interface
- so what is the use ? - used when there are multiple default methods in an interface that share some common functionality, private methods can be used
- private methods can be both "static" and "non-static", hence, `private` or `private static`
- private non-static methods can access all kinds of methods and variables, but private static methods can only access static variables and static methods (both private and public)
---------------------------------------------------------------------------------------------------

dynamic runtime typecasting of an object to multiple "interfaces" and NOT classes.

- using &
- used mainly with generics
- tells the compiler that the object is of type of all the interfaces that are combined using &
- mainly used for serializability of interfaces.

RULE OF THUMB:
- this only works with marker interfaces ( that do not have any abstract methods like Serializable, Cloneable ) and all other interfaces joined using & have net 1 abstract method, which is implemented while returning the object with type casting


eg:
Comparator<Person> comparator = getSerializableComparator();
// this comparator is of both comparator and serializable types.
people.sort(comparator);
// now this comparator object can be written to disk and recovered

public static <T extends Comparable<T>> Comparator<T> getSerializableComparator() {
    return (Comparator<T> & Serializable) (o1, o2) -> o1.compareTo(o2);
    // runtime dynamic type casting.
}
