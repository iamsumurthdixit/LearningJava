Java Collections Framework ( JCF )


- collection refers to the group of objects.
- framework means it provides an architecture to manage these objects. add, update, delete, search etc.
- present in java.util package

- comprises 2 parts ( Iterable interface and Map interface )
---------------------------------------------------------------------------------------------------


Collection Hierarchy


- `Iterable` is the root level interface.
- its child is `Collection` interface
---------------------------------------------------------------------------------------------------


Iterable interface


- used to traverse the collection
- exposes 2 methods to iterate:
1. iterator(): returns an iterator object that allows traversal using .hasNext() [ boolean ], .next() [ value ] and .remove() [ remove the last element returned by iterator ]

2. forEach(): iterate collection using lambda expression. the lambda expression takes the Consumer functional interface, { having functional method void accept(T t); }
- when you write any implementation within the () of forEach, you override the accept() of the Consumer.

/* IMPORTANT UNDERSTANDING HERE */


List<Integer> list = List.of(1,2,3,4,5);
list.forEach(val -> System.out.println(val));

this is theoretically similar to :

default void forEach(Consumer<? super T> action) {
    Objects.requireNonNull(action);
    for (T t : this) {
        action.accept(t);
    }
}

Consumer<Integer> actionObject = new Consumer<>() {
    @Override
    public void accept(Integer t) {
        System.out.println(t);
    }
};

for(Integer val : list) {
    actionObject.accept(val);
}


this is the implementation of the forEach method, here, what happens is:-
when you pass a lambda expression into forEach like, (Integer val) -> S.O.P(val); then it matches the signature of the .accept() present in Consumer. ? super T states that any type T and its supertype T can be used as an object. what java does is, it internally creates an anonymous class that implements the Consumer interface, overrides the .accept() with the lambda expression provided, and then creates an object of this class and maps it to `action` variable in the argument. Since, in java, only objects of class that implements an interface can be used in the situation of passing an interface as the argument.

Now, action object has the .accept() implemented with our lambda expression and can invoke it based on the values pointed by `this`. this points to the collections object on which .forEach is called

NOTE: JVM use "invokedynamic", a mechanism for lambdas rather than anonymous classes for performance, however, the concept is theoretically similar.

/* ----------------------------*/

3. for-each loop can be applied to any object that implements the iterable interface.
---------------------------------------------------------------------------------------------------


Collection interface


- represents group of objets
- what it does ? provides methods to work on a group of objects ( collection )

some common methods:

- size()
- isEmpty()
- contains() : to check the presence of an element in the collection
- toArray() : to convert the collection to an array
- add() : insert
- remove() : if passed only int, removes from that index, for object, use like Integer.valueOf(3), only the first occurrence
- addAll() : insert 1 collection into another
- removeAll() : remove all the elements from the collection which are present in the collection passed in the argument
- removeIf(Predicate_lambda_expr) : removes all elements that satisfy the Predicate lambda expression
- containsAll() : to check if all the values of 1 collection are present in another
- clear() : remove all the elements from a collection
- stream() and parallelStream () : ...
- iterator() : returns an iterable object for a collection ( derived from the Iterable interface )
---------------------------------------------------------------------------------------------------


Difference between Collection and Collections

Collection : Interface

- provides the common methods to work on the collection


Collections : public class

- provides public static methods as utilities to work on a collection
eg:
swap(), reverse(), get(), binarySearch(), sort(), min(), max(), rotate(), copy(), shuffle(), etc.