Collections - Streams


- kind of pipeline through which collection elements will pass
- ability to add intermediate operations like sorting, filtering etc.
- useful for bulk processing ( can do parallel processing )
- does NOT impact the original datasource
- often Collectors class methods are used as terminal operations like .collect()
- toArray() in Stream interface is also a terminal operation



NOTE: apart from Stream interface, IntStream, DoubleStream and LongStream interfaces exist to work with primitives. All these are child interfaces of BaseStream


General execution of a stream:

Step 1: Create Stream
- stream created from the data source like collections.
- eg : - .stream() is applied to the collection object

Step 2: Intermediate operations
- apply one or more operations on top of another like filtering, sorting, etc.
- EVERY intermediate operation `transforms` the stream to another (new) stream based on result
- these operations are `lazy` in nature, i.e., only execute when a terminal operation is invoked

Step 3: Terminal operation
- ONLY 1 terminal operation can be applied to a stream
- triggers the processing of the stream (intermediate operations in order they were applied)
- closes the stream and outputs the result into a new collection without modifying the source collection
- eg: collect(), reduce(), count() etc.
---------------------------------------------------------------------------------------------------


Different ways to create a stream


1. from Collection : .stream()
    List<Integer> numList = new ArrayList<>();
    Stream<Integer> numStream = numList.stream();

2. from Array : Arrays.stream()
    Integer[] array = new Integer[]{1, 2, 3, 4};
    Stream<Integer> arrayStream = Arrays.stream(array);

3. from static method : Stream.of()
   - it internally calls Arrays.stream() because of variable arguments in of()
   Stream<Integer> arrayStream = Stream.of(1,2,3,4,5,6);

4. from Stream.builder() -> returns Builder object
   - keep calling .add() and then finally call .build()
   - Builder is a nested interface inside Stream interface, hence static.
   - Builder extends Consumer @FunctionalInterface and overrides .accept() by .add()
   - actual implementation of .build() is provided in final class Streams

    Stream.Builder<Integer> streamBuilder = Stream.builder();
    streamBuilder.add(1).add(2).add(3).add(4).add(5).add(6);
    System.out.println(streamBuilder.build().count()); // 6

5. using Stream.iterate()
    - works like for loop, seed (starting), increment (lambda func), limit (required because infinite by default)
    Stream<Integer> streamFromIterate = Stream.iterate(500, value -> value + 1).limit(5);


6. Stream.generate(Consumer) for infinite stream using some logic, use .limit()


---------------------------------------------------------------------------------------------------


Intermediate operations: all these operations work on the elements and add each element one by one to downstream


1. filter (Predicate<T> predicate): filters the element

Stream<String> nameStream = Stream.of("hello", "hi", "how");
Stream<String> filteredStream = nameStream.filter((String name) -> name.length() < 3);
List<String> filteredOutput = filteredStream.toList(); // output will not be of Stream, just like in builder pattern
System.out.println(filteredOutput); // [hi]


2. map(Function<T, R> mapper) : used to transform each element of stream to a new object in the resulting stream

Stream<String> capitalNamesStream = nameStream.map(String::toUpperCase); // optimized method reference


3. flatMap(Function<T, Stream<R>> mapper): used to iterate over each element of the complex collection, and helps to flatten it.
- how it works ? - works for "collection of collections."
- transforms each collection object into a stream, and then flattens all such streams into a single stream containing all the objects from all the streams.
- always returns a stream. flatMapToInt, flatMapToDouble, flatMapToLong

List<List<String>> sentenceList = Arrays.asList(
    Arrays.asList("a", "b", "c"),
    Arrays.asList("d", "e", "f"),
    Arrays.asList("g", "h", "i")
);
Stream<String> wordStream = sentenceList
    .stream()
    .flatMap((List<String> sentence) -> sentence.stream()).map(String::toUpperCase);
System.out.println(wordStream.toList()); // [A, B, C, D, E, F, G, H, I]

- this flatMap effectively creates stream for each inner list object and then creates a global stream containing all the elements from such streams.


4. distinct() : removes duplicate from stream based on Object.equals()

5. sorted() / sorted(Comparator) : sorts the elements

Integer[] arr = {1,2,3,4,54,3,21,8,47,82,98};
System.out.println(Arrays.stream(arr).sorted((a, b) -> b - a).toList());

6. peek(Consumer<T> action) : helps you to see the "intermediate result" of stream which is getting processed

List<Integer> numbers = Arrays.asList(3,2,1,4);
Stream<Integer> numberStream = numbers.stream()
    .filter(val-> val > 2)
    .peek(System.out::println) // 3 4
    .map(val -> -1 * val);
System.out.println(numberStream.collect(Collectors.toList())); // [-3, -4]


7. limit(long maxSize) : limits the stream up to first maxSize items only

8. skip(long n) : skips the min(first n, total) items from the stream

9. mapToInt(ToIntFunction<T> mapper): returns IntStream, helps to work with primitive int

List<String> numbers = Arrays.asList("2", "1", "4", "7");

// SITUATION 1
Stream<Integer> numberStream = numbers.stream().map(Integer::parseInt);
System.out.println(Arrays.toString(numberStream.toArray())); // [2, 1, 4, 7]

- Here, using general map() defined in Stream interface, it returns a Stream. Stream works only with objects and not primitives. Hence, even though parseInt return `int`, java does Autoboxing on to convert it to Integer because map() in Stream interface has to return a Stream of objects.
- So, when the requirement is to work with Integer objects, prefer this.


// SITUATION 2
IntStream numberStream = numbers.stream().mapToInt(Integer::parseInt);
int[] outputArray = numberStream.toArray();
System.out.println(Arrays.toString(outputArray));

- here, the mapToInt in Stream returns IntStream, a special kind of Stream for working with primitive `int`. it reduces the overhead of autoboxing and in cases can be a performance boost when to work with methods revolving around int like sum(), average() etc.

10. mapToDouble

11. mapToLong

NOTE: .boxed() on primitive streams return the Stream<wrapper_class>.
eg: Stream<Integer> integerStream = IntStream.range(1, 5).boxed();

Stream<Integer> integerStream = IntStream.range(1, 5).boxed();
List<Integer> integerList = integerStream.toList();
out.println(integerList); // [1, 2, 3, 4]
int sum = integerList.stream().mapToInt(Integer::intValue).sum();
out.println(sum); // 10


12. takeWhile(Predicate) - takes element till the predicate matches.

List<Integer> list = Stream.iterate(1, val -> val + 1).limit(10).toList();
List<Integer> lessThanSix = list.stream().takeWhile(x -> x < 6).toList();
out.println(lessThanSix); // [1, 2, 3, 4, 5]

13. dropWhile(Predicate) - removes all the elements that match the predicate and returns the remaining

List<Integer> greaterThanSix = list.stream().dropWhile(x -> x <= 6).toList();
out.println(greaterThanSix); // [7, 8, 9, 10]
---------------------------------------------------------------------------------------------------

NOTE: without any terminal operation, peek(println) will not work. because the stream processing ONLY takes place when terminal operation is invoked. hence, intermediate operations are lazy
---------------------------------------------------------------------------------------------------


Sequence of Stream operations

List<Integer> numbers = Arrays.asList(2, 1, 4, 7, 10);
Stream<Integer> numberStream = numbers.stream()
    .filter(val -> val > 3)
    .peek(val -> System.out.println("after filter: " + val))
    .map(val -> val * -1)
    .peek(val -> System.out.println("after map: " + val))
    .sorted()
    .peek(val -> System.out.println("after sorted: " + val));
System.out.println(numberStream.collect(Collectors.toList()));

OUTPUT:
after filter: 4
after map: -4
after filter: 7
after map: -7
after filter: 10
after map: -10
after sorted: -10
after sorted: -7
after sorted: -4
[-10, -7, -4]


- operations like filter(), map(), peek() that do NOT require to see the entire stream upfront, take an element one-by-one, apply their effect and pass on to the next intermediate operation.
- stateful operations like sorted(), distinct() require to see all the elements in stream. hence, these operations need to buffer all elements in stream. so these elements only pass the elements downstream unless they have seen all the stream elements and applied their effect
- this offers benefits like finding any() from a large dataset
---------------------------------------------------------------------------------------------------


Terminal operations

- trigger processing of the stream, produce result, closes the stream pipeline

1. forEach(Consumer<T> action)

- performs action on each element of the stream, does not return anything
- kind of "terminal peek"
numbers.stream().forEach(val -> System.out.println(val));


2. toArray() : collects the elements of stream into an array
- by default return Object[]
- if a specific type is required, pass a lambda to create a desired size array of a type

Integer[] numbers = Stream.of(1,2,3,4,5,6,7,8).toArray((int size) -> new Integer[size]);
OR
Integer[] numbers = Stream.of(1,2,3,4,5,6,7,8).toArray(Integer[]::new);
out.println(Arrays.toString(numbers));

---------------------------------------------------------------------------------------------------
NOTE: to print arrays, [], use
1. Arrays.toString(array_name) =  for 1D
2. Arrays.deepToString(array_name) = for n-D arrays
---------------------------------------------------------------------------------------------------

3. Optional<T> reduce(BinaryOperator<T> accumulator) and T reduce(identity, BinaryOperator<T> accumulator)
- does associative reduction on the elements of the stream. Performs associative aggregation function
- Stream has 3 signatures for reduce(). this particular takes a BiFunction and returns Optional
- T reduce(identity, BinaryOperator<T> accumulator) does not return optional as identity will be present in any case.

Optional<Integer> numbers = Stream.of(1,2,3,4).reduce((Integer a, Integer b) → a + 2 * b);
numbers.ifPresent(System.out::println);

- .ifPresent(), .get() and .isPresent() are methods on Optional wrapper class


4. collect (Collector<T, A, R> collector)
- collects the stream items using Collectors.toList() / toSet() / toMap() / groupingBy() / joining() etc.

- toMap()
List<String> list =  List.of("apple", "banana", "orange", "pear", "pine", "cherry", "guava");
Map<String, Integer> map = list.stream().collect(Collectors.toMap(fruit -> fruit, fruit -> fruit.length()));
out.println(map); // {banana=6, orange=6, apple=5, cherry=6, pear=4, pine=4, guava=5}

- groupingBy() -> returns Map<Classifier, List<T>>
- List<T> is default, Set<T> etc can also be returned by specifying

List<String> list =  List.of("apple", "banana", "orange", "pear", "pine", "cherry", "guava");
Map<Integer, List<String>> map = list.stream().collect(Collectors.groupingBy(String::length));
out.println(map); // {4=[pear, pine], 5=[apple, guava], 6=[banana, orange, cherry]}

- partitioningBy(predicate) -> returns Map<Boolean, List<T>>

List<Integer> list =  Stream.iterate(1, val -> val + 1).limit(10).toList();
Map<Boolean, List<Integer>> parityMap = list.stream().collect(Collectors.partitioningBy(val -> (val & 1) == 1));
out.println(parityMap); // {false=[2, 4, 6, 8, 10], true=[1, 3, 5, 7, 9]}

- joining() -> concatenates char sequence into a single string

List<Integer> list = Stream.iterate(1, val -> val + 1).limit(10).toList();
String output = list.stream().map(String::valueOf).collect(Collectors.joining(", "));
out.println(output); // "1, 2, 3, 4, 5, 6, 7, 8, 9, 10"

List<Character> list = List.of('a', 'b', 'c');
String output = list.stream().map(String::valueOf).collect(Collectors.joining());
out.println(output); // "abc"


5. min (Comparator<T> comparator) and max (Comparator<T> comparator)
- find min and max from stream based on the comparator provided
- specific case of reduction, returns Optional, because stream can also be empty

Optional<Integer> numbers = Stream.of(1,2,3,4).min((a, b) -> b - a);
System.out.println(numbers.get());


6. long count() : returns the count

7. anyMatch(Predicate<T> predicate)
- check if any value in the stream matches the given value and return true / false
- obviously predicate is a lambda expression due to Predicate being F.I.

boolean isTenPresent = Stream.of(1,2,3,5,10,34).anyMatch(a -> a == 10);

- allMatch(), noneMatch() also


8. findFirst()
- finds the first element of the stream : Optional as stream can be empty
Stream.of(19,2,3,5,10,34).findFirst().ifPresent(System.out::println); // 19

- findAny() returns any random value from stream
---------------------------------------------------------------------------------------------------


Parallel Stream

- helps to perform operations on stream concurrently using multicore cpu
- .parallelStream() is used rather than .stream()

Internally it does:
1. Task splitting:
- uses spliterator() to split the data into multiple chunks.
- it takes the entire data, call trySplit() on it to recursively divide it into smaller chunks and keep doing this process

2. Task submission and parallel processing:
- chunked data is given to Fork join pool which processes and joins each subtask recursively

long currentTime = System.currentTimeMillis();
List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
numbers.parallelStream()
    .map(val -> -1 * val)
    .filter(val -> val < -5)
    .forEach(System.out::println);
long elapsedTime = System.currentTimeMillis() - currentTime;
System.out.println("Elapsed time: " + elapsedTime); // 2ms
---------------------------------------------------------------------------------------------------


FlatMap complex examples


class Company {
    private String name;
    private List<Department> departments;

    // Constructors, getters, setters
}

class Department {
    private String name;
    private List<Team> teams;

    // Constructors, getters, setters
}

class Team {
    private String teamName;
    private List<Employee> employees;

    // Constructors, getters, setters
}

class Employee {
    private String fullName;
    private List<String> skills; // e.g., ["Java", "SQL", "Leadership"]

    // Constructors, getters, setters
}
Q = gather all unique skills across all employees in the company, regardless of department or team

List<Department> departments = company.getDepartments;
Stream<Team> teamStream = department.stream().flatMap(dept -> dept.getTeams().stream());
Stream<Employee> employeeStream = teamStream.flatMap(team -> team.getEmployees().stream());
Stream<String> skillsStream = employeeStream.flatMap(employee -> employee.getSkills().stream());
Set<String> uniqueSkills = skillsStream.map(String::lowerCase).collect(Collectors.toSet());
---------------------------------------------------------------------------------------------------
// POJOs
// only difference here is there can be multiple users as well but in above example, there was only a single company.
class User {
    private String username;
    private List<Order> orders;
}
class Order {
    private String orderId;
    private List<LineItem> lineItems;
    private LocalDate orderDate;
}

class LineItem {
    private String productId;
    private int quantity;
    private double price;
    private List<SpecialOffer> specialOffers;
}

class SpecialOffer {
    private String offerCode;
    private String description;
}
Q1. How many unique special offers are used across all orders of all users

List<User> users = getUsersFromDatabase();

Set<String> uniqueOfferCodes = users.stream()
    .flatMap(user -> user.getOrders().stream())
    .flatMap(order -> order.getLineItems().stream())
    .flatMap(lineItem -> lineItem.getSpecialOffers().stream())
    .map(SpecialOffer::getOfferCode)
    .collect(Collectors.toSet());

Q2. How many times each offer code was used
- to group order -> groupingBy(), for counting frequency -> counting()

NOTE: Collectors.counting() ALWAYS returns long

Map<String, Long> offerUsageCount = users.stream()
    .flatMap(user -> user.getOrders().stream())
    .flatMap(order -> order.getLineItems().stream())
    .flatMap(lineItem -> lineItem.getSpecialOffers().stream())
    .collect(Collectors.groupingBy(
        SpecialOffer::getOfferCode,
        Collectors.counting()
    ));


---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------








List<Integer> listA = Stream.iterate(1, val -> val + 1).limit(100).toList();
        int[] list = new int[100];
        for(int i = 0; i < list.length; i++) {
            list[i] = listA.get(i);
        }
        int modKey = 19;

        Long sum = Arrays.stream(list)
            .collect(Collectors.groupingBy(key -> key % modKey, Collectors.counting()))
            .values().stream().mapToLong(val -> val * (val - 1L) / 2).sum();

        out.println(sum);
//
//
//        Map<Integer, Long> map = new HashMap<>();
//
//        for(int val : list) {
//            int key = val % modKey;
//            if(map.containsKey(key)) {
//                map.put(key, map.get(key) + 1L);
//            } else {
//                map.put(key, 1L);
//            }
//        }
//
//        Long sum = 0L;
//        for(long value : map.values()) {
//            sum += value * (value - 1L) / 2L;
//        }
//        out.println(sum);

//        for(int val : list) {
//            int key = val % modKey;
//            map.merge(key, 1L, Long::sum);
//        }

//        list.forEach(val -> {
//            int key = val % modKey;
//            map.put(key, map.getOrDefault(key, 0L) + 1);
//        });

//        map = list.stream().collect(Collectors.groupingBy(key -> key % modKey, Collectors.counting()));
    

